
CAN_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f58  08003f58  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f60  08003f60  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000014  08003f7c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003f7c  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d083  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002062  00000000  00000000  0002d0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a2f  00000000  00000000  00030558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d329  00000000  00000000  00052f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1bdd  00000000  00000000  000602b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  00131ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003ef8 	.word	0x08003ef8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08003ef8 	.word	0x08003ef8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_CAN1_Init+0x64>)
 80004de:	4a18      	ldr	r2, [pc, #96]	; (8000540 <MX_CAN1_Init+0x68>)
 80004e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_CAN1_Init+0x64>)
 80004e4:	2210      	movs	r2, #16
 80004e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_CAN1_Init+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_CAN1_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_CAN1_Init+0x64>)
 80004f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_CAN1_Init+0x64>)
 80004fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000502:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_CAN1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_CAN1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_CAN1_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_CAN1_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <MX_CAN1_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_CAN1_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_CAN1_Init+0x64>)
 800052a:	f000 fd07 	bl	8000f3c <HAL_CAN_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000534:	f000 fadf 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000030 	.word	0x20000030
 8000540:	40006400 	.word	0x40006400

08000544 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_CAN_MspInit+0x9c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d138      	bne.n	80005d8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 800056c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000570:	6593      	str	r3, [r2, #88]	; 0x58
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000596:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 80005a8:	230a      	movs	r3, #10
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <HAL_CAN_MspInit+0xa4>)
 80005b4:	f001 fc4a 	bl	8001e4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2014      	movs	r0, #20
 80005be:	f001 fc0e 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005c2:	2014      	movs	r0, #20
 80005c4:	f001 fc27 	bl	8001e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2015      	movs	r0, #21
 80005ce:	f001 fc06 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005d2:	2015      	movs	r0, #21
 80005d4:	f001 fc1f 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d8:	bf00      	nop
 80005da:	3728      	adds	r7, #40	; 0x28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40006400 	.word	0x40006400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400

080005ec <CAN_RX_Header_defunc>:
uint8_t TXData[8] = {8, 7, 6, 5, 4, 3, 2, 1};
uint8_t RXData[8] = {0};
uint8_t C0Data[8] = {0};

void CAN_RX_Header_defunc()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	filtername.FilterActivation = CAN_FILTER_ENABLE; // filter on,off
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	621a      	str	r2, [r3, #32]
	filtername.FilterBank = 1; // filterbank initialize single can = 0~13, dual can = 0~27
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
	filtername.FilterFIFOAssignment = CAN_FILTER_FIFO0; // fifo assgin 0 or 1
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
	filtername.FilterIdHigh = 0x0000; //
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	filtername.FilterIdLow = 0x0000;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
	filtername.FilterMaskIdHigh = 0x0000;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	filtername.FilterMaskIdLow = 0x0000;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
	filtername.FilterMode = CAN_FILTERMODE_IDMASK; // filter mode -> mask or list
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
	filtername.FilterScale = CAN_FILTERSCALE_16BIT; // filter scale
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
	// filtername.SlaveStartFilterBank // only dual can

	HAL_CAN_ConfigFilter(&hcan1, &filtername);
 8000626:	4903      	ldr	r1, [pc, #12]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <CAN_RX_Header_defunc+0x4c>)
 800062a:	f000 fd82 	bl	8001132 <HAL_CAN_ConfigFilter>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000008c 	.word	0x2000008c
 8000638:	20000030 	.word	0x20000030

0800063c <CAN_TX_Header_defunc>:

void CAN_TX_Header_defunc()
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	CAN_TXH.DLC = 8;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 8000642:	2208      	movs	r2, #8
 8000644:	611a      	str	r2, [r3, #16]
	CAN_TXH.IDE = CAN_ID_STD;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
	CAN_TXH.RTR = CAN_RTR_DATA;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
	CAN_TXH.StdId = 0xc0;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 8000654:	22c0      	movs	r2, #192	; 0xc0
 8000656:	601a      	str	r2, [r3, #0]
	CAN_TXH.TransmitGlobalTime = DISABLE;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 800065a:	2200      	movs	r2, #0
 800065c:	751a      	strb	r2, [r3, #20]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000058 	.word	0x20000058

0800066c <CAN_Error_Handler>:

void CAN_Error_Handler()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	if (HAL_CAN_ConfigFilter(&hcan1, &filtername) != HAL_OK)
 8000670:	490d      	ldr	r1, [pc, #52]	; (80006a8 <CAN_Error_Handler+0x3c>)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <CAN_Error_Handler+0x40>)
 8000674:	f000 fd5d 	bl	8001132 <HAL_CAN_ConfigFilter>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <CAN_Error_Handler+0x16>
	{
		// Filter configuration Error
		Error_Handler();
 800067e:	f000 fa3a 	bl	8000af6 <Error_Handler>
	}

	// Can Start
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000682:	480a      	ldr	r0, [pc, #40]	; (80006ac <CAN_Error_Handler+0x40>)
 8000684:	f000 fe1f 	bl	80012c6 <HAL_CAN_Start>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <CAN_Error_Handler+0x26>
	{
		// Start Error
		Error_Handler();
 800068e:	f000 fa32 	bl	8000af6 <Error_Handler>
	}

	// Activate CAN RX notification
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000692:	2102      	movs	r1, #2
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <CAN_Error_Handler+0x40>)
 8000696:	f001 f871 	bl	800177c <HAL_CAN_ActivateNotification>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <CAN_Error_Handler+0x38>
			!= HAL_OK)
	{
		// Notification Error
		Error_Handler();
 80006a0:	f000 fa29 	bl	8000af6 <Error_Handler>
	}
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	20000030 	.word	0x20000030

080006b0 <callbackSystick>:

void callbackSystick() //1ms count
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	static int count = 0;
	count++;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <callbackSystick+0x38>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <callbackSystick+0x38>)
 80006bc:	6013      	str	r3, [r2, #0]
	if (count == 10)  //10ms send can tx message
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <callbackSystick+0x38>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d10e      	bne.n	80006e4 <callbackSystick+0x34>
	{
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <callbackSystick+0x3c>)
 80006c8:	f000 ff11 	bl	80014ee <HAL_CAN_GetTxMailboxesFreeLevel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d005      	beq.n	80006de <callbackSystick+0x2e>
		{
			HAL_CAN_AddTxMessage(&hcan1, &CAN_TXH, TXData, &Mailbox);
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <callbackSystick+0x40>)
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <callbackSystick+0x44>)
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <callbackSystick+0x48>)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <callbackSystick+0x3c>)
 80006da:	f000 fe38 	bl	800134e <HAL_CAN_AddTxMessage>
		}
		count = 0;
 80006de:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <callbackSystick+0x38>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
	}
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000c0 	.word	0x200000c0
 80006ec:	20000030 	.word	0x20000030
 80006f0:	200000b4 	.word	0x200000b4
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000058 	.word	0x20000058

080006fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000704:	2120      	movs	r1, #32
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f001 fd31 	bl	8002170 <HAL_GPIO_TogglePin>
	if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &CAN_RXH, RXData) != HAL_OK)
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000712:	2100      	movs	r1, #0
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 ff1f 	bl	8001558 <HAL_CAN_GetRxMessage>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    {
      Error_Handler();
 8000720:	f000 f9e9 	bl	8000af6 <Error_Handler>
    }
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000b8 	.word	0x200000b8
 8000730:	20000070 	.word	0x20000070

08000734 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <MX_GPIO_Init+0xe8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a33      	ldr	r2, [pc, #204]	; (800081c <MX_GPIO_Init+0xe8>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <MX_GPIO_Init+0xe8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <MX_GPIO_Init+0xe8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a2d      	ldr	r2, [pc, #180]	; (800081c <MX_GPIO_Init+0xe8>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_GPIO_Init+0xe8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_GPIO_Init+0xe8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a27      	ldr	r2, [pc, #156]	; (800081c <MX_GPIO_Init+0xe8>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_GPIO_Init+0xe8>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_GPIO_Init+0xe8>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a21      	ldr	r2, [pc, #132]	; (800081c <MX_GPIO_Init+0xe8>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xe8>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f001 fcc5 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0xec>)
 80007ce:	f001 fb3d 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d2:	230c      	movs	r3, #12
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e2:	2307      	movs	r3, #7
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f001 fb2c 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80007f4:	2320      	movs	r3, #32
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f001 fb1d 	bl	8001e4c <HAL_GPIO_Init>

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	48000800 	.word	0x48000800

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 fb0c 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f912 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f7ff ff80 	bl	8000734 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000834:	f7ff fe50 	bl	80004d8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000838:	f000 fa08 	bl	8000c4c <MX_USART1_UART_Init>
  MX_UART4_Init();
 800083c:	f000 f9d6 	bl	8000bec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  CAN_RX_Header_defunc();
 8000840:	f7ff fed4 	bl	80005ec <CAN_RX_Header_defunc>
  CAN_TX_Header_defunc();
 8000844:	f7ff fefa 	bl	800063c <CAN_TX_Header_defunc>
  CAN_Error_Handler();
 8000848:	f7ff ff10 	bl	800066c <CAN_Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(CAN_RXH.StdId==1)
 800084c:	4b7e      	ldr	r3, [pc, #504]	; (8000a48 <main+0x224>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d1fb      	bne.n	800084c <main+0x28>
	  	  {
	  		  if(RXData[1]==0x33) //acc
 8000854:	4b7d      	ldr	r3, [pc, #500]	; (8000a4c <main+0x228>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	2b33      	cmp	r3, #51	; 0x33
 800085a:	d14e      	bne.n	80008fa <main+0xd6>
	  		  	  {
	  		  		 CAN_VALUE.acc_x1=RXData[2];
 800085c:	4b7b      	ldr	r3, [pc, #492]	; (8000a4c <main+0x228>)
 800085e:	789b      	ldrb	r3, [r3, #2]
 8000860:	b25a      	sxtb	r2, r3
 8000862:	4b7b      	ldr	r3, [pc, #492]	; (8000a50 <main+0x22c>)
 8000864:	701a      	strb	r2, [r3, #0]
	  		  		 CAN_VALUE.acc_x2=RXData[3];
 8000866:	4b79      	ldr	r3, [pc, #484]	; (8000a4c <main+0x228>)
 8000868:	78db      	ldrb	r3, [r3, #3]
 800086a:	b25a      	sxtb	r2, r3
 800086c:	4b78      	ldr	r3, [pc, #480]	; (8000a50 <main+0x22c>)
 800086e:	705a      	strb	r2, [r3, #1]
	  		  		 CAN_VALUE.acc_y1=RXData[4];
 8000870:	4b76      	ldr	r3, [pc, #472]	; (8000a4c <main+0x228>)
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	b25a      	sxtb	r2, r3
 8000876:	4b76      	ldr	r3, [pc, #472]	; (8000a50 <main+0x22c>)
 8000878:	709a      	strb	r2, [r3, #2]
	  		  		 CAN_VALUE.acc_y2=RXData[5];
 800087a:	4b74      	ldr	r3, [pc, #464]	; (8000a4c <main+0x228>)
 800087c:	795b      	ldrb	r3, [r3, #5]
 800087e:	b25a      	sxtb	r2, r3
 8000880:	4b73      	ldr	r3, [pc, #460]	; (8000a50 <main+0x22c>)
 8000882:	70da      	strb	r2, [r3, #3]
	  		  		 CAN_VALUE.acc_z1=RXData[6];
 8000884:	4b71      	ldr	r3, [pc, #452]	; (8000a4c <main+0x228>)
 8000886:	799b      	ldrb	r3, [r3, #6]
 8000888:	b25a      	sxtb	r2, r3
 800088a:	4b71      	ldr	r3, [pc, #452]	; (8000a50 <main+0x22c>)
 800088c:	711a      	strb	r2, [r3, #4]
	  		  		 CAN_VALUE.acc_z2=RXData[7];
 800088e:	4b6f      	ldr	r3, [pc, #444]	; (8000a4c <main+0x228>)
 8000890:	79db      	ldrb	r3, [r3, #7]
 8000892:	b25a      	sxtb	r2, r3
 8000894:	4b6e      	ldr	r3, [pc, #440]	; (8000a50 <main+0x22c>)
 8000896:	715a      	strb	r2, [r3, #5]

	  				 CAN_VALUE.acc_X = (CAN_VALUE.acc_x2 << 8) + (uint8_t)CAN_VALUE.acc_x1;
 8000898:	4b6d      	ldr	r3, [pc, #436]	; (8000a50 <main+0x22c>)
 800089a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b6a      	ldr	r3, [pc, #424]	; (8000a50 <main+0x22c>)
 80008a6:	f993 3000 	ldrsb.w	r3, [r3]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	4b66      	ldr	r3, [pc, #408]	; (8000a50 <main+0x22c>)
 80008b6:	825a      	strh	r2, [r3, #18]
	  			     CAN_VALUE.acc_Y = (CAN_VALUE.acc_y2 << 8) + (uint8_t)CAN_VALUE.acc_y1;
 80008b8:	4b65      	ldr	r3, [pc, #404]	; (8000a50 <main+0x22c>)
 80008ba:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b62      	ldr	r3, [pc, #392]	; (8000a50 <main+0x22c>)
 80008c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	4413      	add	r3, r2
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	4b5e      	ldr	r3, [pc, #376]	; (8000a50 <main+0x22c>)
 80008d6:	829a      	strh	r2, [r3, #20]
	  			  	 CAN_VALUE.acc_Z = (CAN_VALUE.acc_z2 << 8) + (uint8_t)CAN_VALUE.acc_z1;
 80008d8:	4b5d      	ldr	r3, [pc, #372]	; (8000a50 <main+0x22c>)
 80008da:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b5a      	ldr	r3, [pc, #360]	; (8000a50 <main+0x22c>)
 80008e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4413      	add	r3, r2
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	4b56      	ldr	r3, [pc, #344]	; (8000a50 <main+0x22c>)
 80008f6:	82da      	strh	r2, [r3, #22]
 80008f8:	e7a8      	b.n	800084c <main+0x28>

	  		  		 /*CAN_VALUE.acc_X = (CAN_VALUE.acc_x2 << 8) | CAN_VALUE.acc_x1;
	  		  		 CAN_VALUE.acc_Y = (CAN_VALUE.acc_y2 << 8) | CAN_VALUE.acc_y1;
	  		  		 CAN_VALUE.acc_Z = (CAN_VALUE.acc_z2 << 8) | CAN_VALUE.acc_z1;*/
	  		  	  }
	  		  else if(RXData[1]==0x34) // gyro
 80008fa:	4b54      	ldr	r3, [pc, #336]	; (8000a4c <main+0x228>)
 80008fc:	785b      	ldrb	r3, [r3, #1]
 80008fe:	2b34      	cmp	r3, #52	; 0x34
 8000900:	d14e      	bne.n	80009a0 <main+0x17c>
	  		  	  {
	  			     CAN_VALUE.gyr_x1=RXData[2];
 8000902:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <main+0x228>)
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	b25a      	sxtb	r2, r3
 8000908:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <main+0x22c>)
 800090a:	719a      	strb	r2, [r3, #6]
	  				 CAN_VALUE.gyr_x2=RXData[3];
 800090c:	4b4f      	ldr	r3, [pc, #316]	; (8000a4c <main+0x228>)
 800090e:	78db      	ldrb	r3, [r3, #3]
 8000910:	b25a      	sxtb	r2, r3
 8000912:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <main+0x22c>)
 8000914:	71da      	strb	r2, [r3, #7]
	  				 CAN_VALUE.gyr_y1=RXData[4];
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <main+0x228>)
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	b25a      	sxtb	r2, r3
 800091c:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <main+0x22c>)
 800091e:	721a      	strb	r2, [r3, #8]
	  				 CAN_VALUE.gyr_y2=RXData[5];
 8000920:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <main+0x228>)
 8000922:	795b      	ldrb	r3, [r3, #5]
 8000924:	b25a      	sxtb	r2, r3
 8000926:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <main+0x22c>)
 8000928:	725a      	strb	r2, [r3, #9]
	  				 CAN_VALUE.gyr_z1=RXData[6];
 800092a:	4b48      	ldr	r3, [pc, #288]	; (8000a4c <main+0x228>)
 800092c:	799b      	ldrb	r3, [r3, #6]
 800092e:	b25a      	sxtb	r2, r3
 8000930:	4b47      	ldr	r3, [pc, #284]	; (8000a50 <main+0x22c>)
 8000932:	729a      	strb	r2, [r3, #10]
	  				 CAN_VALUE.gyr_z2=RXData[7];
 8000934:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <main+0x228>)
 8000936:	79db      	ldrb	r3, [r3, #7]
 8000938:	b25a      	sxtb	r2, r3
 800093a:	4b45      	ldr	r3, [pc, #276]	; (8000a50 <main+0x22c>)
 800093c:	72da      	strb	r2, [r3, #11]

	  				 CAN_VALUE.gyr_X = (CAN_VALUE.gyr_x2 << 8) + (uint8_t)CAN_VALUE.gyr_x1;
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <main+0x22c>)
 8000940:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000944:	b29b      	uxth	r3, r3
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <main+0x22c>)
 800094c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b29b      	uxth	r3, r3
 8000954:	4413      	add	r3, r2
 8000956:	b29b      	uxth	r3, r3
 8000958:	b21a      	sxth	r2, r3
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <main+0x22c>)
 800095c:	831a      	strh	r2, [r3, #24]
	  				 CAN_VALUE.gyr_Y = (CAN_VALUE.gyr_y2 << 8) + (uint8_t)CAN_VALUE.gyr_y1;
 800095e:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <main+0x22c>)
 8000960:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000964:	b29b      	uxth	r3, r3
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <main+0x22c>)
 800096c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	b29b      	uxth	r3, r3
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	b21a      	sxth	r2, r3
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <main+0x22c>)
 800097c:	835a      	strh	r2, [r3, #26]
	  				 CAN_VALUE.gyr_Z = (CAN_VALUE.gyr_z2 << 8) + (uint8_t)CAN_VALUE.gyr_z1;
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <main+0x22c>)
 8000980:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000984:	b29b      	uxth	r3, r3
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <main+0x22c>)
 800098c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b29b      	uxth	r3, r3
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <main+0x22c>)
 800099c:	839a      	strh	r2, [r3, #28]
 800099e:	e755      	b.n	800084c <main+0x28>

	  		  		 /*CAN_VALUE.gyr_X = (CAN_VALUE.gyr_x2 << 8) | CAN_VALUE.gyr_x1;
	  		  		 CAN_VALUE.gyr_Y = (CAN_VALUE.gyr_y2 << 8) | CAN_VALUE.gyr_y1;
	  		  		 CAN_VALUE.gyr_Z = (CAN_VALUE.gyr_z2 << 8) | CAN_VALUE.gyr_z1;*/
	  		  	  }
	  		  else if(RXData[1]==0x35) // ang
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <main+0x228>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b35      	cmp	r3, #53	; 0x35
 80009a6:	f47f af51 	bne.w	800084c <main+0x28>
	  		  	  {
	  			     CAN_VALUE.ang_x1=RXData[2];
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <main+0x228>)
 80009ac:	789b      	ldrb	r3, [r3, #2]
 80009ae:	b25a      	sxtb	r2, r3
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <main+0x22c>)
 80009b2:	731a      	strb	r2, [r3, #12]
	  				 CAN_VALUE.ang_x2=RXData[3];
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <main+0x228>)
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <main+0x22c>)
 80009bc:	735a      	strb	r2, [r3, #13]
	  				 CAN_VALUE.ang_y1=RXData[4];
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <main+0x228>)
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <main+0x22c>)
 80009c6:	739a      	strb	r2, [r3, #14]
	  				 CAN_VALUE.ang_y2=RXData[5];
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <main+0x228>)
 80009ca:	795b      	ldrb	r3, [r3, #5]
 80009cc:	b25a      	sxtb	r2, r3
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <main+0x22c>)
 80009d0:	73da      	strb	r2, [r3, #15]
	  				 CAN_VALUE.ang_z1=RXData[6];
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <main+0x228>)
 80009d4:	799b      	ldrb	r3, [r3, #6]
 80009d6:	b25a      	sxtb	r2, r3
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <main+0x22c>)
 80009da:	741a      	strb	r2, [r3, #16]
	  				 CAN_VALUE.ang_z2=RXData[7];
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <main+0x228>)
 80009de:	79db      	ldrb	r3, [r3, #7]
 80009e0:	b25a      	sxtb	r2, r3
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <main+0x22c>)
 80009e4:	745a      	strb	r2, [r3, #17]

	  			  	CAN_VALUE.ang_X = (CAN_VALUE.ang_x2 << 8) + (uint8_t)CAN_VALUE.ang_x1;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <main+0x22c>)
 80009e8:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <main+0x22c>)
 80009f4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <main+0x22c>)
 8000a04:	83da      	strh	r2, [r3, #30]
	  		  		CAN_VALUE.ang_Y = (CAN_VALUE.ang_y2 << 8) + (uint8_t)CAN_VALUE.ang_y1;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <main+0x22c>)
 8000a08:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <main+0x22c>)
 8000a14:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <main+0x22c>)
 8000a24:	841a      	strh	r2, [r3, #32]
	  		  		CAN_VALUE.ang_Z = (CAN_VALUE.ang_z2 << 8) + (uint8_t)CAN_VALUE.ang_z1;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <main+0x22c>)
 8000a28:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <main+0x22c>)
 8000a34:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <main+0x22c>)
 8000a44:	845a      	strh	r2, [r3, #34]	; 0x22
	  if(CAN_RXH.StdId==1)
 8000a46:	e701      	b.n	800084c <main+0x28>
 8000a48:	20000070 	.word	0x20000070
 8000a4c:	200000b8 	.word	0x200000b8
 8000a50:	200000c4 	.word	0x200000c4

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	; 0x58
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2244      	movs	r2, #68	; 0x44
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 fa40 	bl	8003ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a7a:	f001 fba1 	bl	80021c0 <HAL_PWREx_ControlVoltageScaling>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a84:	f000 f837 	bl	8000af6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fbd8 	bl	800226c <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ac2:	f000 f818 	bl	8000af6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2303      	movs	r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	2104      	movs	r1, #4
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 ffd8 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aea:	f000 f804 	bl	8000af6 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3758      	adds	r7, #88	; 0x58
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afa:	b672      	cpsid	i
}
 8000afc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afe:	e7fe      	b.n	8000afe <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_MspInit+0x44>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6613      	str	r3, [r2, #96]	; 0x60
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x44>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
callbackSystick();
 8000b94:	f7ff fd8c 	bl	80006b0 <callbackSystick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f9b0 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <CAN1_RX0_IRQHandler+0x10>)
 8000ba6:	f000 fe0f 	bl	80017c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000030 	.word	0x20000030

08000bb4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <CAN1_RX1_IRQHandler+0x10>)
 8000bba:	f000 fe05 	bl	80017c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000030 	.word	0x20000030

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_UART4_Init+0x58>)
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <MX_UART4_Init+0x5c>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_UART4_Init+0x58>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_UART4_Init+0x58>)
 8000c30:	f002 fcb2 	bl	8003598 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c3a:	f7ff ff5c 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000e8 	.word	0x200000e8
 8000c48:	40004c00 	.word	0x40004c00

08000c4c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MX_USART1_UART_Init+0x5c>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c90:	f002 fc82 	bl	8003598 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f7ff ff2c 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000016c 	.word	0x2000016c
 8000ca8:	40013800 	.word	0x40013800

08000cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0a6      	sub	sp, #152	; 0x98
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	2268      	movs	r2, #104	; 0x68
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 f90b 	bl	8003ee8 <memset>
  if(uartHandle->Instance==UART4)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a43      	ldr	r2, [pc, #268]	; (8000de4 <HAL_UART_MspInit+0x138>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d13c      	bne.n	8000d56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 f8f7 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf4:	f7ff feff 	bl	8000af6 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	4a3a      	ldr	r2, [pc, #232]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d02:	6593      	str	r3, [r2, #88]	; 0x58
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	4a34      	ldr	r2, [pc, #208]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1c:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d40:	2308      	movs	r3, #8
 8000d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f001 f87c 	bl	8001e4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d54:	e041      	b.n	8000dda <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a24      	ldr	r2, [pc, #144]	; (8000dec <HAL_UART_MspInit+0x140>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13c      	bne.n	8000dda <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 f8b5 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000d78:	f7ff febd 	bl	8000af6 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d86:	6613      	str	r3, [r2, #96]	; 0x60
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0x13c>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f001 f839 	bl	8001e4c <HAL_GPIO_Init>
}
 8000dda:	bf00      	nop
 8000ddc:	3798      	adds	r7, #152	; 0x98
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004c00 	.word	0x40004c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40013800 	.word	0x40013800

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff fee8 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f003 f83f 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fcff 	bl	8000824 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e34:	08003f68 	.word	0x08003f68
  ldr r2, =_sbss
 8000e38:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e3c:	200001f4 	.word	0x200001f4

08000e40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_Init+0x3c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_Init+0x3c>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 ffb4 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f80f 	bl	8000e84 <HAL_InitTick>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	e001      	b.n	8000e76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e72:	f7ff fe45 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e76:	79fb      	ldrb	r3, [r7, #7]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40022000 	.word	0x40022000

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_InitTick+0x6c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d023      	beq.n	8000ee0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_InitTick+0x70>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 ffbf 	bl	8001e32 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10f      	bne.n	8000eda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d809      	bhi.n	8000ed4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 ff89 	bl	8001dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_InitTick+0x74>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e004      	b.n	8000ee4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e001      	b.n	8000ee4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000010 	.word	0x20000010
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	2000000c 	.word	0x2000000c

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	200001f0 	.word	0x200001f0

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200001f0 	.word	0x200001f0

08000f3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e0ed      	b.n	800112a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff faf2 	bl	8000544 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0201 	orr.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f70:	f7ff ffd8 	bl	8000f24 <HAL_GetTick>
 8000f74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f76:	e012      	b.n	8000f9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f78:	f7ff ffd4 	bl	8000f24 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d90b      	bls.n	8000f9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2205      	movs	r2, #5
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0c5      	b.n	800112a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0e5      	beq.n	8000f78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0202 	bic.w	r2, r2, #2
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fbc:	f7ff ffb2 	bl	8000f24 <HAL_GetTick>
 8000fc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc2:	e012      	b.n	8000fea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc4:	f7ff ffae 	bl	8000f24 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b0a      	cmp	r3, #10
 8000fd0:	d90b      	bls.n	8000fea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e09f      	b.n	800112a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e5      	bne.n	8000fc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e007      	b.n	8001022 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7e5b      	ldrb	r3, [r3, #25]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d108      	bne.n	800103c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e007      	b.n	800104c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800104a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e9b      	ldrb	r3, [r3, #26]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0220 	bic.w	r2, r2, #32
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7edb      	ldrb	r3, [r3, #27]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0210 	bic.w	r2, r2, #16
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0210 	orr.w	r2, r2, #16
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7f1b      	ldrb	r3, [r3, #28]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0208 	orr.w	r2, r2, #8
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0208 	bic.w	r2, r2, #8
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7f5b      	ldrb	r3, [r3, #29]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d108      	bne.n	80010e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0204 	orr.w	r2, r2, #4
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0204 	bic.w	r2, r2, #4
 80010f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	ea42 0103 	orr.w	r1, r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001132:	b480      	push	{r7}
 8001134:	b087      	sub	sp, #28
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800114a:	7cfb      	ldrb	r3, [r7, #19]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <HAL_CAN_ConfigFilter+0x26>
 8001150:	7cfb      	ldrb	r3, [r7, #19]
 8001152:	2b02      	cmp	r3, #2
 8001154:	f040 80aa 	bne.w	80012ac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	2201      	movs	r2, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d123      	bne.n	80011da <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	401a      	ands	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3248      	adds	r2, #72	; 0x48
 80011ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d0:	6979      	ldr	r1, [r7, #20]
 80011d2:	3348      	adds	r3, #72	; 0x48
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d122      	bne.n	8001228 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001202:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3248      	adds	r2, #72	; 0x48
 8001208:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800121c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	3348      	adds	r3, #72	; 0x48
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d109      	bne.n	8001244 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001242:	e007      	b.n	8001254 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800126e:	e007      	b.n	8001280 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	431a      	orrs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d107      	bne.n	8001298 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	431a      	orrs	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800129e:	f023 0201 	bic.w	r2, r3, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e006      	b.n	80012ba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
  }
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12e      	bne.n	8001338 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012f2:	f7ff fe17 	bl	8000f24 <HAL_GetTick>
 80012f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012f8:	e012      	b.n	8001320 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012fa:	f7ff fe13 	bl	8000f24 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b0a      	cmp	r3, #10
 8001306:	d90b      	bls.n	8001320 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2205      	movs	r2, #5
 8001318:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e012      	b.n	8001346 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1e5      	bne.n	80012fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	e006      	b.n	8001346 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
  }
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800134e:	b480      	push	{r7}
 8001350:	b089      	sub	sp, #36	; 0x24
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001362:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800136c:	7ffb      	ldrb	r3, [r7, #31]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d003      	beq.n	800137a <HAL_CAN_AddTxMessage+0x2c>
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	2b02      	cmp	r3, #2
 8001376:	f040 80ad 	bne.w	80014d4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10a      	bne.n	800139a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8095 	beq.w	80014c4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	0e1b      	lsrs	r3, r3, #24
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013a4:	2201      	movs	r2, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	409a      	lsls	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10d      	bne.n	80013d2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013c0:	68f9      	ldr	r1, [r7, #12]
 80013c2:	6809      	ldr	r1, [r1, #0]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3318      	adds	r3, #24
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	440b      	add	r3, r1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e00f      	b.n	80013f2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3318      	adds	r3, #24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3318      	adds	r3, #24
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	3304      	adds	r3, #4
 8001404:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	7d1b      	ldrb	r3, [r3, #20]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d111      	bne.n	8001432 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3318      	adds	r3, #24
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	6811      	ldr	r1, [r2, #0]
 8001422:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3318      	adds	r3, #24
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	3304      	adds	r3, #4
 8001430:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3307      	adds	r3, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	061a      	lsls	r2, r3, #24
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3306      	adds	r3, #6
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3305      	adds	r3, #5
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	3204      	adds	r2, #4
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	4610      	mov	r0, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	6811      	ldr	r1, [r2, #0]
 800145a:	ea43 0200 	orr.w	r2, r3, r0
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	440b      	add	r3, r1
 8001464:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001468:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3303      	adds	r3, #3
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	061a      	lsls	r2, r3, #24
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3302      	adds	r3, #2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4313      	orrs	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	4610      	mov	r0, r2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	6811      	ldr	r1, [r2, #0]
 8001490:	ea43 0200 	orr.w	r2, r3, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	440b      	add	r3, r1
 800149a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800149e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3318      	adds	r3, #24
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	6811      	ldr	r1, [r2, #0]
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3318      	adds	r3, #24
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	440b      	add	r3, r1
 80014be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e00e      	b.n	80014e2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e006      	b.n	80014e2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
  }
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001500:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d002      	beq.n	800150e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d11d      	bne.n	800154a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d003      	beq.n	800157c <HAL_CAN_GetRxMessage+0x24>
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b02      	cmp	r3, #2
 8001578:	f040 80f3 	bne.w	8001762 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10e      	bne.n	80015a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d116      	bne.n	80015be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0e7      	b.n	8001770 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0d8      	b.n	8001770 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	331b      	adds	r3, #27
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0204 	and.w	r2, r3, #4
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10c      	bne.n	80015f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	331b      	adds	r3, #27
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0d5b      	lsrs	r3, r3, #21
 80015ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e00b      	b.n	800160e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	331b      	adds	r3, #27
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	331b      	adds	r3, #27
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0202 	and.w	r2, r3, #2
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	331b      	adds	r3, #27
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	4413      	add	r3, r2
 8001630:	3304      	adds	r3, #4
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 020f 	and.w	r2, r3, #15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	331b      	adds	r3, #27
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b2da      	uxtb	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	331b      	adds	r3, #27
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0a1a      	lsrs	r2, r3, #8
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0c1a      	lsrs	r2, r3, #16
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3302      	adds	r3, #2
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	4413      	add	r3, r2
 80016c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0e1a      	lsrs	r2, r3, #24
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3303      	adds	r3, #3
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	4413      	add	r3, r2
 80016da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3304      	adds	r3, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0a1a      	lsrs	r2, r3, #8
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3305      	adds	r3, #5
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0c1a      	lsrs	r2, r3, #16
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	3306      	adds	r3, #6
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0e1a      	lsrs	r2, r3, #24
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	3307      	adds	r3, #7
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d108      	bne.n	800174e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	e007      	b.n	800175e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0220 	orr.w	r2, r2, #32
 800175c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e006      	b.n	8001770 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
  }
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d002      	beq.n	800179a <HAL_CAN_ActivateNotification+0x1e>
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d109      	bne.n	80017ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6959      	ldr	r1, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e006      	b.n	80017bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
  }
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d07c      	beq.n	8001908 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d023      	beq.n	8001860 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f983 	bl	8001b36 <HAL_CAN_TxMailbox0CompleteCallback>
 8001830:	e016      	b.n	8001860 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	e00c      	b.n	8001860 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
 8001858:	e002      	b.n	8001860 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f989 	bl	8001b72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d024      	beq.n	80018b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001872:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f963 	bl	8001b4a <HAL_CAN_TxMailbox1CompleteCallback>
 8001884:	e016      	b.n	80018b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	e00c      	b.n	80018b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	e002      	b.n	80018b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f969 	bl	8001b86 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d024      	beq.n	8001908 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f943 	bl	8001b5e <HAL_CAN_TxMailbox2CompleteCallback>
 80018d8:	e016      	b.n	8001908 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
 80018ec:	e00c      	b.n	8001908 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	e002      	b.n	8001908 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f949 	bl	8001b9a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2208      	movs	r2, #8
 8001946:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f930 	bl	8001bae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7fe fec8 	bl	80006fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001986:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2208      	movs	r2, #8
 80019aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f912 	bl	8001bd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8f9 	bl	8001bc2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2210      	movs	r2, #16
 80019ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f8fc 	bl	8001bea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8f5 	bl	8001bfe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d07b      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d072      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d043      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03e      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a96:	2b60      	cmp	r3, #96	; 0x60
 8001a98:	d02b      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x32a>
 8001a9a:	2b60      	cmp	r3, #96	; 0x60
 8001a9c:	d82e      	bhi.n	8001afc <HAL_CAN_IRQHandler+0x334>
 8001a9e:	2b50      	cmp	r3, #80	; 0x50
 8001aa0:	d022      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x320>
 8001aa2:	2b50      	cmp	r3, #80	; 0x50
 8001aa4:	d82a      	bhi.n	8001afc <HAL_CAN_IRQHandler+0x334>
 8001aa6:	2b40      	cmp	r3, #64	; 0x40
 8001aa8:	d019      	beq.n	8001ade <HAL_CAN_IRQHandler+0x316>
 8001aaa:	2b40      	cmp	r3, #64	; 0x40
 8001aac:	d826      	bhi.n	8001afc <HAL_CAN_IRQHandler+0x334>
 8001aae:	2b30      	cmp	r3, #48	; 0x30
 8001ab0:	d010      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x30c>
 8001ab2:	2b30      	cmp	r3, #48	; 0x30
 8001ab4:	d822      	bhi.n	8001afc <HAL_CAN_IRQHandler+0x334>
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d002      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x2f8>
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d005      	beq.n	8001aca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001abe:	e01d      	b.n	8001afc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ac8:	e019      	b.n	8001afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ad2:	e014      	b.n	8001afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001adc:	e00f      	b.n	8001afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ae6:	e00a      	b.n	8001afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af0:	e005      	b.n	8001afe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001afa:	e000      	b.n	8001afe <HAL_CAN_IRQHandler+0x336>
            break;
 8001afc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2204      	movs	r2, #4
 8001b14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f872 	bl	8001c12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f7ff ff8e 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff29 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff3e 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff8e 	bl	8001d1c <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5d 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff31 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa2 	bl	8001d84 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e154      	b.n	8002106 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8146 	beq.w	8002100 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d005      	beq.n	8001e8c <HAL_GPIO_Init+0x40>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d130      	bne.n	8001eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 0201 	and.w	r2, r3, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d017      	beq.n	8001f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d123      	bne.n	8001f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	6939      	ldr	r1, [r7, #16]
 8001f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0203 	and.w	r2, r3, #3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80a0 	beq.w	8002100 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <HAL_GPIO_Init+0x2d8>)
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc4:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_GPIO_Init+0x2d8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6613      	str	r3, [r2, #96]	; 0x60
 8001fcc:	4b55      	ldr	r3, [pc, #340]	; (8002124 <HAL_GPIO_Init+0x2d8>)
 8001fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd8:	4a53      	ldr	r2, [pc, #332]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	220f      	movs	r2, #15
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002002:	d019      	beq.n	8002038 <HAL_GPIO_Init+0x1ec>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a49      	ldr	r2, [pc, #292]	; (800212c <HAL_GPIO_Init+0x2e0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_GPIO_Init+0x1e8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00d      	beq.n	8002030 <HAL_GPIO_Init+0x1e4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_GPIO_Init+0x2e8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <HAL_GPIO_Init+0x1e0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a46      	ldr	r2, [pc, #280]	; (8002138 <HAL_GPIO_Init+0x2ec>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_GPIO_Init+0x1dc>
 8002024:	2304      	movs	r3, #4
 8002026:	e008      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002028:	2307      	movs	r3, #7
 800202a:	e006      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 800202c:	2303      	movs	r3, #3
 800202e:	e004      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002030:	2302      	movs	r3, #2
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002038:	2300      	movs	r3, #0
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	f002 0203 	and.w	r2, r2, #3
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	4093      	lsls	r3, r2
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800204a:	4937      	ldr	r1, [pc, #220]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002058:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_GPIO_Init+0x2f0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800207c:	4a2f      	ldr	r2, [pc, #188]	; (800213c <HAL_GPIO_Init+0x2f0>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_GPIO_Init+0x2f0>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a6:	4a25      	ldr	r2, [pc, #148]	; (800213c <HAL_GPIO_Init+0x2f0>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_GPIO_Init+0x2f0>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_GPIO_Init+0x2f0>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_GPIO_Init+0x2f0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_GPIO_Init+0x2f0>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	f47f aea3 	bne.w	8001e5c <HAL_GPIO_Init+0x10>
  }
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	48000400 	.word	0x48000400
 8002130:	48000800 	.word	0x48000800
 8002134:	48000c00 	.word	0x48000c00
 8002138:	48001000 	.word	0x48001000
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800215c:	e002      	b.n	8002164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43d9      	mvns	r1, r3
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	400b      	ands	r3, r1
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_PWREx_GetVoltageRange+0x18>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40007000 	.word	0x40007000

080021c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ce:	d130      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d038      	beq.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2232      	movs	r2, #50	; 0x32
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002204:	e002      	b.n	800220c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b01      	subs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	d102      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x60>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f2      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222c:	d110      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e00f      	b.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800223a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223e:	d007      	beq.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000
 8002264:	20000008 	.word	0x20000008
 8002268:	431bde83 	.word	0x431bde83

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f000 bc02 	b.w	8002a84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002280:	4b96      	ldr	r3, [pc, #600]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228a:	4b94      	ldr	r3, [pc, #592]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80e4 	beq.w	800246a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4c>
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	f040 808b 	bne.w	80023c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	f040 8087 	bne.w	80023c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b8:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_OscConfig+0x64>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e3d9      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	4b81      	ldr	r3, [pc, #516]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <HAL_RCC_OscConfig+0x7e>
 80022e0:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e8:	e005      	b.n	80022f6 <HAL_RCC_OscConfig+0x8a>
 80022ea:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d223      	bcs.n	8002342 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fd8c 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e3ba      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a72      	ldr	r2, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b70      	ldr	r3, [pc, #448]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	496d      	ldr	r1, [pc, #436]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232c:	4b6b      	ldr	r3, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	4968      	ldr	r1, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
 8002340:	e025      	b.n	800238e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002342:	4b66      	ldr	r3, [pc, #408]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4960      	ldr	r1, [pc, #384]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002360:	4b5e      	ldr	r3, [pc, #376]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	495b      	ldr	r1, [pc, #364]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fd4c 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e37a      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800238e:	f000 fc81 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b51      	ldr	r3, [pc, #324]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	4950      	ldr	r1, [pc, #320]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_RCC_OscConfig+0x278>)
 80023ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023ae:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fd66 	bl	8000e84 <HAL_InitTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d052      	beq.n	8002468 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	e35e      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d032      	beq.n	8002434 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a42      	ldr	r2, [pc, #264]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023da:	f7fe fda3 	bl	8000f24 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e2:	f7fe fd9f 	bl	8000f24 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e347      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023f4:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b33      	ldr	r3, [pc, #204]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4930      	ldr	r1, [pc, #192]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	492b      	ldr	r1, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
 8002432:	e01a      	b.n	800246a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002440:	f7fe fd70 	bl	8000f24 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002448:	f7fe fd6c 	bl	8000f24 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e314      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1dc>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d073      	beq.n	800255e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d005      	beq.n	8002488 <HAL_RCC_OscConfig+0x21c>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d10e      	bne.n	80024a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d10b      	bne.n	80024a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d063      	beq.n	800255c <HAL_RCC_OscConfig+0x2f0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d15f      	bne.n	800255c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e2f1      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x24c>
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e025      	b.n	8002504 <HAL_RCC_OscConfig+0x298>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c0:	d114      	bne.n	80024ec <HAL_RCC_OscConfig+0x280>
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a02      	ldr	r2, [pc, #8]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e013      	b.n	8002504 <HAL_RCC_OscConfig+0x298>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08003f10 	.word	0x08003f10
 80024e4:	20000008 	.word	0x20000008
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	4ba0      	ldr	r3, [pc, #640]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a9f      	ldr	r2, [pc, #636]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b9d      	ldr	r3, [pc, #628]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a9c      	ldr	r2, [pc, #624]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fd0a 	bl	8000f24 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fd06 	bl	8000f24 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2ae      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002526:	4b92      	ldr	r3, [pc, #584]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x2a8>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fcf6 	bl	8000f24 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fcf2 	bl	8000f24 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e29a      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254e:	4b88      	ldr	r3, [pc, #544]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x2d0>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d060      	beq.n	800262c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x310>
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d119      	bne.n	80025aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d116      	bne.n	80025aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	4b7c      	ldr	r3, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x328>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e277      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	4973      	ldr	r1, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a8:	e040      	b.n	800262c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d023      	beq.n	80025fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b2:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fcb1 	bl	8000f24 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe fcad 	bl	8000f24 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e255      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d8:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b62      	ldr	r3, [pc, #392]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	495f      	ldr	r1, [pc, #380]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
 80025f8:	e018      	b.n	800262c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5c      	ldr	r2, [pc, #368]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fc8d 	bl	8000f24 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fc89 	bl	8000f24 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e231      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d03c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01c      	beq.n	800267a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002640:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002646:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe fc68 	bl	8000f24 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe fc64 	bl	8000f24 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e20c      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 800266c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ef      	beq.n	8002658 <HAL_RCC_OscConfig+0x3ec>
 8002678:	e01b      	b.n	80026b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 800267c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002680:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fe fc4b 	bl	8000f24 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002692:	f7fe fc47 	bl	8000f24 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1ef      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ef      	bne.n	8002692 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80a6 	beq.w	800280c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	6593      	str	r3, [r2, #88]	; 0x58
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e8:	2301      	movs	r3, #1
 80026ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_RCC_OscConfig+0x508>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d118      	bne.n	800272a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_OscConfig+0x508>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <HAL_RCC_OscConfig+0x508>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002704:	f7fe fc0e 	bl	8000f24 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7fe fc0a 	bl	8000f24 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1b2      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_RCC_OscConfig+0x508>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d108      	bne.n	8002744 <HAL_RCC_OscConfig+0x4d8>
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002742:	e029      	b.n	8002798 <HAL_RCC_OscConfig+0x52c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d115      	bne.n	8002778 <HAL_RCC_OscConfig+0x50c>
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	4a03      	ldr	r2, [pc, #12]	; (8002770 <HAL_RCC_OscConfig+0x504>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x52c>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
 8002778:	4b9a      	ldr	r3, [pc, #616]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	4a99      	ldr	r2, [pc, #612]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002788:	4b96      	ldr	r3, [pc, #600]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	4a95      	ldr	r2, [pc, #596]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d016      	beq.n	80027ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fbc0 	bl	8000f24 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe fbbc 	bl	8000f24 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e162      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027be:	4b89      	ldr	r3, [pc, #548]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ed      	beq.n	80027a8 <HAL_RCC_OscConfig+0x53c>
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe fba9 	bl	8000f24 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fba5 	bl	8000f24 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e14b      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ec:	4b7d      	ldr	r3, [pc, #500]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ed      	bne.n	80027d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002800:	4b78      	ldr	r3, [pc, #480]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4a77      	ldr	r2, [pc, #476]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d03c      	beq.n	8002892 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002820:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002826:	4a6f      	ldr	r2, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe fb78 	bl	8000f24 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002838:	f7fe fb74 	bl	8000f24 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e11c      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800284a:	4b66      	ldr	r3, [pc, #408]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800284c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ef      	beq.n	8002838 <HAL_RCC_OscConfig+0x5cc>
 8002858:	e01b      	b.n	8002892 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800285a:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800285c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7fe fb5b 	bl	8000f24 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002872:	f7fe fb57 	bl	8000f24 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0ff      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002884:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ef      	bne.n	8002872 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80f3 	beq.w	8002a82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	f040 80c9 	bne.w	8002a38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028a6:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0203 	and.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d12c      	bne.n	8002914 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	3b01      	subs	r3, #1
 80028c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d123      	bne.n	8002914 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d11b      	bne.n	8002914 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d113      	bne.n	8002914 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	3b01      	subs	r3, #1
 80028fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d109      	bne.n	8002914 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d06b      	beq.n	80029ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d062      	beq.n	80029e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800291a:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0ac      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800292a:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002934:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002936:	f7fe faf5 	bl	8000f24 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe faf1 	bl	8000f24 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e099      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <HAL_RCC_OscConfig+0x77c>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800296c:	3a01      	subs	r2, #1
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	4311      	orrs	r1, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002976:	0212      	lsls	r2, r2, #8
 8002978:	4311      	orrs	r1, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800297e:	0852      	lsrs	r2, r2, #1
 8002980:	3a01      	subs	r2, #1
 8002982:	0552      	lsls	r2, r2, #21
 8002984:	4311      	orrs	r1, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800298a:	0852      	lsrs	r2, r2, #1
 800298c:	3a01      	subs	r2, #1
 800298e:	0652      	lsls	r2, r2, #25
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002996:	06d2      	lsls	r2, r2, #27
 8002998:	430a      	orrs	r2, r1
 800299a:	4912      	ldr	r1, [pc, #72]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029b8:	f7fe fab4 	bl	8000f24 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe fab0 	bl	8000f24 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e058      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <HAL_RCC_OscConfig+0x778>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029de:	e050      	b.n	8002a82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e04f      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
 80029e4:	40021000 	.word	0x40021000
 80029e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d144      	bne.n	8002a82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a23      	ldr	r2, [pc, #140]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 80029fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a10:	f7fe fa88 	bl	8000f24 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fa84 	bl	8000f24 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e02c      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x7ac>
 8002a36:	e024      	b.n	8002a82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	d01f      	beq.n	8002a7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fa6b 	bl	8000f24 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fa67 	bl	8000f24 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e00f      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4905      	ldr	r1, [pc, #20]	; (8002a8c <HAL_RCC_OscConfig+0x820>)
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x824>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
 8002a7c:	e001      	b.n	8002a82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	feeefffc 	.word	0xfeeefffc

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0e7      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4970      	ldr	r1, [pc, #448]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0cf      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d908      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4960      	ldr	r1, [pc, #384]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d04c      	beq.n	8002bac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d121      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0a6      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d115      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e09a      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e08e      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e086      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4943      	ldr	r1, [pc, #268]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fe f9d2 	bl	8000f24 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fe f9ce 	bl	8000f24 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e06e      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d208      	bcs.n	8002bda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	492b      	ldr	r1, [pc, #172]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d210      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 0207 	bic.w	r2, r3, #7
 8002bf0:	4923      	ldr	r1, [pc, #140]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e036      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4918      	ldr	r1, [pc, #96]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c34:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4910      	ldr	r1, [pc, #64]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c48:	f000 f824 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	490b      	ldr	r1, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1f4>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
 8002c64:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1f8>)
 8002c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1fc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f909 	bl	8000e84 <HAL_InitTick>
 8002c72:	4603      	mov	r3, r0
 8002c74:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c76:	7afb      	ldrb	r3, [r7, #11]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08003f10 	.word	0x08003f10
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	2000000c 	.word	0x2000000c

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca2:	4b3e      	ldr	r3, [pc, #248]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d121      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d11e      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cd4:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e004      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d134      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0xac>
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	e005      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	617b      	str	r3, [r7, #20]
      break;
 8002d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	3301      	adds	r3, #1
 8002d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fb03 f202 	mul.w	r2, r3, r2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	0e5b      	lsrs	r3, r3, #25
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08003f28 	.word	0x08003f28
 8002da4:	00f42400 	.word	0x00f42400
 8002da8:	007a1200 	.word	0x007a1200

08002dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000008 	.word	0x20000008

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dc8:	f7ff fff0 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08003f20 	.word	0x08003f20

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002df4:	f7ff ffda 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0adb      	lsrs	r3, r3, #11
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4904      	ldr	r1, [pc, #16]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08003f20 	.word	0x08003f20

08002e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e28:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e34:	f7ff f9b6 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002e38:	6178      	str	r0, [r7, #20]
 8002e3a:	e014      	b.n	8002e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	; 0x58
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e54:	f7ff f9a6 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e6c:	d10b      	bne.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d919      	bls.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2ba0      	cmp	r3, #160	; 0xa0
 8002e78:	d902      	bls.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e013      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e80:	2301      	movs	r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e010      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b80      	cmp	r3, #128	; 0x80
 8002e8a:	d902      	bls.n	8002e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	e00a      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b80      	cmp	r3, #128	; 0x80
 8002e96:	d102      	bne.n	8002e9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e98:	2302      	movs	r3, #2
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	e004      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b70      	cmp	r3, #112	; 0x70
 8002ea2:	d101      	bne.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 0207 	bic.w	r2, r3, #7
 8002eb0:	4909      	ldr	r1, [pc, #36]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40022000 	.word	0x40022000

08002edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee8:	2300      	movs	r3, #0
 8002eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d031      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f00:	d01a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f06:	d814      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f12:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f1e:	e00c      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fa44 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f30:	e003      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	74fb      	strb	r3, [r7, #19]
      break;
 8002f36:	e000      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f40:	4b51      	ldr	r3, [pc, #324]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	494e      	ldr	r1, [pc, #312]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f56:	e001      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 809e 	beq.w	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6e:	4b46      	ldr	r3, [pc, #280]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f84:	4b40      	ldr	r3, [pc, #256]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f90:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa0:	4b3a      	ldr	r3, [pc, #232]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a39      	ldr	r2, [pc, #228]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fac:	f7fd ffba 	bl	8000f24 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb2:	e009      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb4:	f7fd ffb6 	bl	8000f24 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d902      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	74fb      	strb	r3, [r7, #19]
        break;
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fc8:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d15a      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01e      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d019      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003000:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d016      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fd ff76 	bl	8000f24 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303a:	e00b      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fd ff72 	bl	8000f24 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d902      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	74fb      	strb	r3, [r7, #19]
            break;
 8003052:	e006      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0ec      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003076:	4904      	ldr	r1, [pc, #16]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800307e:	e009      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	74bb      	strb	r3, [r7, #18]
 8003084:	e006      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003094:	7c7b      	ldrb	r3, [r7, #17]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b9e      	ldr	r3, [pc, #632]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	4a9d      	ldr	r2, [pc, #628]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b2:	4b98      	ldr	r3, [pc, #608]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f023 0203 	bic.w	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4994      	ldr	r1, [pc, #592]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d4:	4b8f      	ldr	r3, [pc, #572]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 020c 	bic.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	498c      	ldr	r1, [pc, #560]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030f6:	4b87      	ldr	r3, [pc, #540]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	4983      	ldr	r1, [pc, #524]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	497b      	ldr	r1, [pc, #492]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800313a:	4b76      	ldr	r3, [pc, #472]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	4972      	ldr	r1, [pc, #456]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800315c:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	496a      	ldr	r1, [pc, #424]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318c:	4961      	ldr	r1, [pc, #388]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a0:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	4959      	ldr	r1, [pc, #356]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c2:	4b54      	ldr	r3, [pc, #336]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	4950      	ldr	r1, [pc, #320]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031e4:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	4948      	ldr	r1, [pc, #288]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800320c:	f023 0203 	bic.w	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	493f      	ldr	r1, [pc, #252]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d028      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003228:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	4937      	ldr	r1, [pc, #220]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003246:	d106      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003248:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800324e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003252:	60d3      	str	r3, [r2, #12]
 8003254:	e011      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325e:	d10c      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f8a4 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d028      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	491f      	ldr	r1, [pc, #124]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a4:	d106      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b0:	60d3      	str	r3, [r2, #12]
 80032b2:	e011      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f875 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d02b      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	4908      	ldr	r1, [pc, #32]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003302:	d109      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a02      	ldr	r2, [pc, #8]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800330a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800330e:	60d3      	str	r3, [r2, #12]
 8003310:	e014      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2101      	movs	r1, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f843 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003366:	d10c      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f820 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	4904      	ldr	r1, [pc, #16]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033c2:	4b74      	ldr	r3, [pc, #464]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d018      	beq.n	8003400 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033ce:	4b71      	ldr	r3, [pc, #452]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0203 	and.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d10d      	bne.n	80033fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
       ||
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033e6:	4b6b      	ldr	r3, [pc, #428]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
       ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d047      	beq.n	800348a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	e044      	b.n	800348a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d018      	beq.n	800343a <RCCEx_PLLSAI1_Config+0x86>
 8003408:	2b03      	cmp	r3, #3
 800340a:	d825      	bhi.n	8003458 <RCCEx_PLLSAI1_Config+0xa4>
 800340c:	2b01      	cmp	r3, #1
 800340e:	d002      	beq.n	8003416 <RCCEx_PLLSAI1_Config+0x62>
 8003410:	2b02      	cmp	r3, #2
 8003412:	d009      	beq.n	8003428 <RCCEx_PLLSAI1_Config+0x74>
 8003414:	e020      	b.n	8003458 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003416:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d11d      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003426:	e01a      	b.n	800345e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003428:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d116      	bne.n	8003462 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003438:	e013      	b.n	8003462 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800343a:	4b56      	ldr	r3, [pc, #344]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003446:	4b53      	ldr	r3, [pc, #332]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003456:	e006      	b.n	8003466 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e004      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345e:	bf00      	nop
 8003460:	e002      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003466:	bf00      	nop
    }

    if(status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800346e:	4b49      	ldr	r3, [pc, #292]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	430b      	orrs	r3, r1
 8003484:	4943      	ldr	r1, [pc, #268]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d17c      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003490:	4b40      	ldr	r3, [pc, #256]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3f      	ldr	r2, [pc, #252]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800349a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349c:	f7fd fd42 	bl	8000f24 <HAL_GetTick>
 80034a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034a2:	e009      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a4:	f7fd fd3e 	bl	8000f24 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d902      	bls.n	80034b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	73fb      	strb	r3, [r7, #15]
        break;
 80034b6:	e005      	b.n	80034c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ef      	bne.n	80034a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d15f      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d110      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80034d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6892      	ldr	r2, [r2, #8]
 80034e0:	0211      	lsls	r1, r2, #8
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68d2      	ldr	r2, [r2, #12]
 80034e6:	06d2      	lsls	r2, r2, #27
 80034e8:	430a      	orrs	r2, r1
 80034ea:	492a      	ldr	r1, [pc, #168]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	610b      	str	r3, [r1, #16]
 80034f0:	e027      	b.n	8003542 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d112      	bne.n	800351e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003500:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	0211      	lsls	r1, r2, #8
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6912      	ldr	r2, [r2, #16]
 800350e:	0852      	lsrs	r2, r2, #1
 8003510:	3a01      	subs	r2, #1
 8003512:	0552      	lsls	r2, r2, #21
 8003514:	430a      	orrs	r2, r1
 8003516:	491f      	ldr	r1, [pc, #124]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	610b      	str	r3, [r1, #16]
 800351c:	e011      	b.n	8003542 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003526:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	0211      	lsls	r1, r2, #8
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6952      	ldr	r2, [r2, #20]
 8003534:	0852      	lsrs	r2, r2, #1
 8003536:	3a01      	subs	r2, #1
 8003538:	0652      	lsls	r2, r2, #25
 800353a:	430a      	orrs	r2, r1
 800353c:	4915      	ldr	r1, [pc, #84]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a13      	ldr	r2, [pc, #76]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800354c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fd fce9 	bl	8000f24 <HAL_GetTick>
 8003552:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003554:	e009      	b.n	800356a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003556:	f7fd fce5 	bl	8000f24 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d902      	bls.n	800356a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	73fb      	strb	r3, [r7, #15]
          break;
 8003568:	e005      	b.n	8003576 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ef      	beq.n	8003556 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	4903      	ldr	r1, [pc, #12]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e040      	b.n	800362c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fb76 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f82c 	bl	8003634 <UART_SetConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e022      	b.n	800362c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 faa6 	bl	8003b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb2d 	bl	8003c84 <UART_CheckIdleState>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b08a      	sub	sp, #40	; 0x28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	4313      	orrs	r3, r2
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4ba5      	ldr	r3, [pc, #660]	; (80038f8 <UART_SetConfig+0x2c4>)
 8003664:	4013      	ands	r3, r2
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366c:	430b      	orrs	r3, r1
 800366e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a9a      	ldr	r2, [pc, #616]	; (80038fc <UART_SetConfig+0x2c8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	4313      	orrs	r3, r2
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a91      	ldr	r2, [pc, #580]	; (8003900 <UART_SetConfig+0x2cc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d126      	bne.n	800370c <UART_SetConfig+0xd8>
 80036be:	4b91      	ldr	r3, [pc, #580]	; (8003904 <UART_SetConfig+0x2d0>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d81b      	bhi.n	8003704 <UART_SetConfig+0xd0>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0xa0>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036f5 	.word	0x080036f5
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036fd 	.word	0x080036fd
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e0d6      	b.n	800389a <UART_SetConfig+0x266>
 80036ec:	2302      	movs	r3, #2
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f2:	e0d2      	b.n	800389a <UART_SetConfig+0x266>
 80036f4:	2304      	movs	r3, #4
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e0ce      	b.n	800389a <UART_SetConfig+0x266>
 80036fc:	2308      	movs	r3, #8
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e0ca      	b.n	800389a <UART_SetConfig+0x266>
 8003704:	2310      	movs	r3, #16
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e0c6      	b.n	800389a <UART_SetConfig+0x266>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a7d      	ldr	r2, [pc, #500]	; (8003908 <UART_SetConfig+0x2d4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d138      	bne.n	8003788 <UART_SetConfig+0x154>
 8003716:	4b7b      	ldr	r3, [pc, #492]	; (8003904 <UART_SetConfig+0x2d0>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d82d      	bhi.n	8003780 <UART_SetConfig+0x14c>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0xf8>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003761 	.word	0x08003761
 8003730:	08003781 	.word	0x08003781
 8003734:	08003781 	.word	0x08003781
 8003738:	08003781 	.word	0x08003781
 800373c:	08003771 	.word	0x08003771
 8003740:	08003781 	.word	0x08003781
 8003744:	08003781 	.word	0x08003781
 8003748:	08003781 	.word	0x08003781
 800374c:	08003769 	.word	0x08003769
 8003750:	08003781 	.word	0x08003781
 8003754:	08003781 	.word	0x08003781
 8003758:	08003781 	.word	0x08003781
 800375c:	08003779 	.word	0x08003779
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e098      	b.n	800389a <UART_SetConfig+0x266>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e094      	b.n	800389a <UART_SetConfig+0x266>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e090      	b.n	800389a <UART_SetConfig+0x266>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e08c      	b.n	800389a <UART_SetConfig+0x266>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e088      	b.n	800389a <UART_SetConfig+0x266>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5f      	ldr	r2, [pc, #380]	; (800390c <UART_SetConfig+0x2d8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d125      	bne.n	80037de <UART_SetConfig+0x1aa>
 8003792:	4b5c      	ldr	r3, [pc, #368]	; (8003904 <UART_SetConfig+0x2d0>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800379c:	2b30      	cmp	r3, #48	; 0x30
 800379e:	d016      	beq.n	80037ce <UART_SetConfig+0x19a>
 80037a0:	2b30      	cmp	r3, #48	; 0x30
 80037a2:	d818      	bhi.n	80037d6 <UART_SetConfig+0x1a2>
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d00a      	beq.n	80037be <UART_SetConfig+0x18a>
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d814      	bhi.n	80037d6 <UART_SetConfig+0x1a2>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <UART_SetConfig+0x182>
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d008      	beq.n	80037c6 <UART_SetConfig+0x192>
 80037b4:	e00f      	b.n	80037d6 <UART_SetConfig+0x1a2>
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037bc:	e06d      	b.n	800389a <UART_SetConfig+0x266>
 80037be:	2302      	movs	r3, #2
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c4:	e069      	b.n	800389a <UART_SetConfig+0x266>
 80037c6:	2304      	movs	r3, #4
 80037c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037cc:	e065      	b.n	800389a <UART_SetConfig+0x266>
 80037ce:	2308      	movs	r3, #8
 80037d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d4:	e061      	b.n	800389a <UART_SetConfig+0x266>
 80037d6:	2310      	movs	r3, #16
 80037d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037dc:	e05d      	b.n	800389a <UART_SetConfig+0x266>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <UART_SetConfig+0x2dc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d125      	bne.n	8003834 <UART_SetConfig+0x200>
 80037e8:	4b46      	ldr	r3, [pc, #280]	; (8003904 <UART_SetConfig+0x2d0>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037f2:	2bc0      	cmp	r3, #192	; 0xc0
 80037f4:	d016      	beq.n	8003824 <UART_SetConfig+0x1f0>
 80037f6:	2bc0      	cmp	r3, #192	; 0xc0
 80037f8:	d818      	bhi.n	800382c <UART_SetConfig+0x1f8>
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	d00a      	beq.n	8003814 <UART_SetConfig+0x1e0>
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d814      	bhi.n	800382c <UART_SetConfig+0x1f8>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <UART_SetConfig+0x1d8>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d008      	beq.n	800381c <UART_SetConfig+0x1e8>
 800380a:	e00f      	b.n	800382c <UART_SetConfig+0x1f8>
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e042      	b.n	800389a <UART_SetConfig+0x266>
 8003814:	2302      	movs	r3, #2
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e03e      	b.n	800389a <UART_SetConfig+0x266>
 800381c:	2304      	movs	r3, #4
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e03a      	b.n	800389a <UART_SetConfig+0x266>
 8003824:	2308      	movs	r3, #8
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e036      	b.n	800389a <UART_SetConfig+0x266>
 800382c:	2310      	movs	r3, #16
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e032      	b.n	800389a <UART_SetConfig+0x266>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a30      	ldr	r2, [pc, #192]	; (80038fc <UART_SetConfig+0x2c8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d12a      	bne.n	8003894 <UART_SetConfig+0x260>
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <UART_SetConfig+0x2d0>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800384c:	d01a      	beq.n	8003884 <UART_SetConfig+0x250>
 800384e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003852:	d81b      	bhi.n	800388c <UART_SetConfig+0x258>
 8003854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003858:	d00c      	beq.n	8003874 <UART_SetConfig+0x240>
 800385a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385e:	d815      	bhi.n	800388c <UART_SetConfig+0x258>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <UART_SetConfig+0x238>
 8003864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003868:	d008      	beq.n	800387c <UART_SetConfig+0x248>
 800386a:	e00f      	b.n	800388c <UART_SetConfig+0x258>
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e012      	b.n	800389a <UART_SetConfig+0x266>
 8003874:	2302      	movs	r3, #2
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e00e      	b.n	800389a <UART_SetConfig+0x266>
 800387c:	2304      	movs	r3, #4
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e00a      	b.n	800389a <UART_SetConfig+0x266>
 8003884:	2308      	movs	r3, #8
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e006      	b.n	800389a <UART_SetConfig+0x266>
 800388c:	2310      	movs	r3, #16
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003892:	e002      	b.n	800389a <UART_SetConfig+0x266>
 8003894:	2310      	movs	r3, #16
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a17      	ldr	r2, [pc, #92]	; (80038fc <UART_SetConfig+0x2c8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	f040 808b 	bne.w	80039bc <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d834      	bhi.n	8003918 <UART_SetConfig+0x2e4>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x280>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	08003919 	.word	0x08003919
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	08003919 	.word	0x08003919
 80038c4:	080038e7 	.word	0x080038e7
 80038c8:	08003919 	.word	0x08003919
 80038cc:	08003919 	.word	0x08003919
 80038d0:	08003919 	.word	0x08003919
 80038d4:	080038ef 	.word	0x080038ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7ff fa74 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80038dc:	61f8      	str	r0, [r7, #28]
        break;
 80038de:	e021      	b.n	8003924 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <UART_SetConfig+0x2e0>)
 80038e2:	61fb      	str	r3, [r7, #28]
        break;
 80038e4:	e01e      	b.n	8003924 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e6:	f7ff f9d5 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 80038ea:	61f8      	str	r0, [r7, #28]
        break;
 80038ec:	e01a      	b.n	8003924 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f2:	61fb      	str	r3, [r7, #28]
        break;
 80038f4:	e016      	b.n	8003924 <UART_SetConfig+0x2f0>
 80038f6:	bf00      	nop
 80038f8:	efff69f3 	.word	0xefff69f3
 80038fc:	40008000 	.word	0x40008000
 8003900:	40013800 	.word	0x40013800
 8003904:	40021000 	.word	0x40021000
 8003908:	40004400 	.word	0x40004400
 800390c:	40004800 	.word	0x40004800
 8003910:	40004c00 	.word	0x40004c00
 8003914:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003922:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80fa 	beq.w	8003b20 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	429a      	cmp	r2, r3
 800393a:	d305      	bcc.n	8003948 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	429a      	cmp	r2, r3
 8003946:	d903      	bls.n	8003950 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800394e:	e0e7      	b.n	8003b20 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2200      	movs	r2, #0
 8003954:	461c      	mov	r4, r3
 8003956:	4615      	mov	r5, r2
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	022b      	lsls	r3, r5, #8
 8003962:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003966:	0222      	lsls	r2, r4, #8
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	6849      	ldr	r1, [r1, #4]
 800396c:	0849      	lsrs	r1, r1, #1
 800396e:	2000      	movs	r0, #0
 8003970:	4688      	mov	r8, r1
 8003972:	4681      	mov	r9, r0
 8003974:	eb12 0a08 	adds.w	sl, r2, r8
 8003978:	eb43 0b09 	adc.w	fp, r3, r9
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800398a:	4650      	mov	r0, sl
 800398c:	4659      	mov	r1, fp
 800398e:	f7fc fc21 	bl	80001d4 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4613      	mov	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a0:	d308      	bcc.n	80039b4 <UART_SetConfig+0x380>
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a8:	d204      	bcs.n	80039b4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	e0b5      	b.n	8003b20 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039ba:	e0b1      	b.n	8003b20 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	d15d      	bne.n	8003a82 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80039c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d827      	bhi.n	8003a1e <UART_SetConfig+0x3ea>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x3a0>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a1f 	.word	0x08003a1f
 80039e4:	08003a0f 	.word	0x08003a0f
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a1f 	.word	0x08003a1f
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	08003a17 	.word	0x08003a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7ff f9e4 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80039fc:	61f8      	str	r0, [r7, #28]
        break;
 80039fe:	e014      	b.n	8003a2a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7ff f9f6 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8003a04:	61f8      	str	r0, [r7, #28]
        break;
 8003a06:	e010      	b.n	8003a2a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <UART_SetConfig+0x508>)
 8003a0a:	61fb      	str	r3, [r7, #28]
        break;
 8003a0c:	e00d      	b.n	8003a2a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7ff f941 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8003a12:	61f8      	str	r0, [r7, #28]
        break;
 8003a14:	e009      	b.n	8003a2a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	61fb      	str	r3, [r7, #28]
        break;
 8003a1c:	e005      	b.n	8003a2a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d077      	beq.n	8003b20 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005a      	lsls	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b0f      	cmp	r3, #15
 8003a4a:	d916      	bls.n	8003a7a <UART_SetConfig+0x446>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d212      	bcs.n	8003a7a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f023 030f 	bic.w	r3, r3, #15
 8003a5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	8afb      	ldrh	r3, [r7, #22]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	8afa      	ldrh	r2, [r7, #22]
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	e052      	b.n	8003b20 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a80:	e04e      	b.n	8003b20 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d827      	bhi.n	8003ada <UART_SetConfig+0x4a6>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <UART_SetConfig+0x45c>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003ab5 	.word	0x08003ab5
 8003a94:	08003abd 	.word	0x08003abd
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003adb 	.word	0x08003adb
 8003aa0:	08003acb 	.word	0x08003acb
 8003aa4:	08003adb 	.word	0x08003adb
 8003aa8:	08003adb 	.word	0x08003adb
 8003aac:	08003adb 	.word	0x08003adb
 8003ab0:	08003ad3 	.word	0x08003ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7ff f986 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	61f8      	str	r0, [r7, #28]
        break;
 8003aba:	e014      	b.n	8003ae6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003abc:	f7ff f998 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8003ac0:	61f8      	str	r0, [r7, #28]
        break;
 8003ac2:	e010      	b.n	8003ae6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <UART_SetConfig+0x508>)
 8003ac6:	61fb      	str	r3, [r7, #28]
        break;
 8003ac8:	e00d      	b.n	8003ae6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aca:	f7ff f8e3 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8003ace:	61f8      	str	r0, [r7, #28]
        break;
 8003ad0:	e009      	b.n	8003ae6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad6:	61fb      	str	r3, [r7, #28]
        break;
 8003ad8:	e005      	b.n	8003ae6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d019      	beq.n	8003b20 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	085a      	lsrs	r2, r3, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	441a      	add	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	d909      	bls.n	8003b1a <UART_SetConfig+0x4e6>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d205      	bcs.n	8003b1a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
 8003b18:	e002      	b.n	8003b20 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	00f42400 	.word	0x00f42400

08003b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01a      	beq.n	8003c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3e:	d10a      	bne.n	8003c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
  }
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c94:	f7fd f946 	bl	8000f24 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d10e      	bne.n	8003cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f82d 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e023      	b.n	8003d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d10e      	bne.n	8003cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f817 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00d      	b.n	8003d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b09c      	sub	sp, #112	; 0x70
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d26:	e0a5      	b.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	f000 80a1 	beq.w	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fd f8f7 	bl	8000f24 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d13e      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e6      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	663b      	str	r3, [r7, #96]	; 0x60
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e067      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d04f      	beq.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de2:	d147      	bne.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e40:	623a      	str	r2, [r7, #32]
 8003e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	69f9      	ldr	r1, [r7, #28]
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e010      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	f43f af4a 	beq.w	8003d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3770      	adds	r7, #112	; 0x70
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4d0d      	ldr	r5, [pc, #52]	; (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	; (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2600      	movs	r6, #0
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4d0b      	ldr	r5, [pc, #44]	; (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f000 f820 	bl	8003ef8 <_init>
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08003f60 	.word	0x08003f60
 8003edc:	08003f60 	.word	0x08003f60
 8003ee0:	08003f60 	.word	0x08003f60
 8003ee4:	08003f64 	.word	0x08003f64

08003ee8 <memset>:
 8003ee8:	4402      	add	r2, r0
 8003eea:	4603      	mov	r3, r0
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d100      	bne.n	8003ef2 <memset+0xa>
 8003ef0:	4770      	bx	lr
 8003ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef6:	e7f9      	b.n	8003eec <memset+0x4>

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
